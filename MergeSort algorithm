
public class MergeSort {

    //Spilt the arrays and fill them.
    public int[] mergeArrays(int[] arr) {
        if (arr.length < 2) {
            return arr;
        }
        int mid = arr.length / 2;
        int[] left = new int[mid];
        int[] right = new int[arr.length - mid];
        
        for (int i = 0; i < left.length; i++) {
            left[i] = arr[i];
        }
        for (int j = mid; j < arr.length; j++) {
            right[j - mid] = arr[j];
        }
        left=mergeArrays(left);
        right=mergeArrays(right);
        
        return merge(left,right);
    }
    //----------------------------------------------------------

    public int[] merge(int[] left, int[] right) {
        int arr[] = new int[left.length + right.length];
        int j = 0, i = 0, k = 0;
        int nL = left.length;
        int nR = right.length;
        
        //  check which element is smaller so we will insert it in the arr  
        while (i < nL && j < nR) {
            if (left[i] <= right[j]) {
                arr[k] = left[i];
                i++;
            } else {
                arr[k] = right[j];
                j++;
            }
            k++;
        }
        //one of the (left or right) array still has sorted elements so we will insert them in the arr
        while (i < nL) {
            arr[k] = left[i];
                    i++;
                    k++;
        }
        while (j < nR) {
            arr[k] = right[j];
            j++;
            k++;
        }
        return arr;
    }

    public static void main(String args[]) {
        int[] arr = {2, 4, 1, 3, 6, 7, 8, 5};
        MergeSort s = new MergeSort();
        // s.mergeArrays(arr);
        for (int a : s.mergeArrays(arr)) {
            System.out.print(a);
        }

    }
}
